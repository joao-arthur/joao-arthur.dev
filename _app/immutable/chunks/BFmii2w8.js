import{t as g,b as h}from"./BAQlJMdJ.js";import"./jhujCLip.js";import{s,k as f,a4 as n,a5 as a,n as w}from"./l2PV5vIv.js";import{h as t}from"./PcRRlBoN.js";const b={title:"Interfaces",description:"Is there a way to make a big project easy to implement, easy to test and type-safe?",created_at:"2023-08-12",updated_at:"2025-02-20",technologies:["TypeScript","Java","Rust"]},{title:_,description:I,created_at:R,updated_at:N,technologies:T}=b;var v=g(`<h1 id="interfaces"><a aria-hidden="true" tabindex="-1" href="#interfaces"><span class="icon icon-link"></span></a>Interfaces</h1> <p>Is there a way to make a <em>big project</em> easy to <em>implement</em>, easy to <em>test</em> and <em>type-safe</em>?</p> <h2 id="data-types"><a aria-hidden="true" tabindex="-1" href="#data-types"><span class="icon icon-link"></span></a>Data Types</h2> <p>In any programming language, data has types. Numbers, text, binaries, all of them have a <em>specific
type</em>. The same way, an object can be defined by a type, referred to as an <em>interface</em> in most
languages.</p> <blockquote><p>An interface is a set of operations with arguments and return types.</p></blockquote> <p>This allows for:</p> <ul><li>Multiple implementations</li> <li>Hide dependency injection</li> <li>Plain objects for testing</li></ul> <h2 id="why"><a aria-hidden="true" tabindex="-1" href="#why"><span class="icon icon-link"></span></a>Why?</h2> <pre class="language-ts"><!></pre> <blockquote><p>Sample service to create a user, that also exports its <em>stubs</em></p></blockquote> <p>Any functions that has a <strong>CreateUserService</strong> argument can be tested using <strong>createUserServiceStub</strong> and <strong>createUserServiceErrorStub</strong> instead of mocking all dependencies.
This abstracts implementation and let you think about <strong>input</strong> and <strong>output</strong>.</p> <h2 id="pitfalls"><a aria-hidden="true" tabindex="-1" href="#pitfalls"><span class="icon icon-link"></span></a>Pitfalls</h2> <ul><li><p>If you apply interfaces exhaustively, the indirection makes it hard to follow the code. As a rule
of thumb, use interfaces for: <strong>External resources</strong> (HTTP requests, database connectionsâ€¦) and <strong>dependency injection</strong> (When these resources are passed as arguments of functions, as in the
previous example)</p></li> <li><p>There is two problems that a type-system may not cover:</p> <ul><li><strong>Null values</strong></li> <li><strong>Error handling</strong></li></ul></li></ul> <h2 id="language-by-language"><a aria-hidden="true" tabindex="-1" href="#language-by-language"><span class="icon icon-link"></span></a>Language By Language</h2> <p>Take the following example in <em>JavaScript</em>:</p> <pre class="language-js"><!></pre> <p>In order to compare this code to another languages, suppose:</p> <ul><li><strong>repository</strong> can be null</li> <li><strong>repository</strong> can throw an error</li> <li><strong>user</strong> is an required argument</li> <li>If <strong>user</strong> is correctly saved, the saved user is returned</li></ul> <h3 id="typescript"><a aria-hidden="true" tabindex="-1" href="#typescript"><span class="icon icon-link"></span></a>TypeScript</h3> <p>TypeScript supports union types, that allow typing required and null values:</p> <pre class="language-ts"><!></pre> <h3 id="java"><a aria-hidden="true" tabindex="-1" href="#java"><span class="icon icon-link"></span></a>Java</h3> <p>Java provides:</p> <ul><li>Annotation syntax that allows for <code>@Nullable</code> and <code>@NotNull</code> (There are many implementations from
different libs)</li> <li><strong>throws</strong> keyword to make error handling explicit</li> <li><em>Mockito</em> and similar libraries to mock injected dependencies during runtime</li></ul> <pre class="language-java"><!></pre> <h3 id="rust"><a aria-hidden="true" tabindex="-1" href="#rust"><span class="icon icon-link"></span></a>Rust</h3> <p>Rust has a unique type-system because it has:</p> <ul><li>No <em>null</em> pointer</li> <li><em>Option</em> data structure to handle present or absent values</li> <li><em>Result</em> data structure to handle success or error values</li></ul> <p>The <em>Option</em> and <em>Result</em> are enums, so it is necessary to handle each case:</p> <pre class="language-rust"><!></pre> <h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><span class="icon icon-link"></span></a>Conclusion</h2> <p>Interfaces, like any <strong>abstraction</strong>, can <em>hide errors</em>. If null and errors are <strong>explicit</strong>, these
errors can be avoided, at the cost of verbose code. Personally, I like the <strong>Rust</strong> solution.</p>`,1);function q(i){var r=v(),e=s(f(r),16),u=n(e);t(u,()=>`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">CreateUserService</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceActual<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceErrorStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),a(e);var p=s(e,14),k=n(p);t(k,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token parameter">user<span class="token punctuation">,</span>
    repository<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(p);var o=s(p,10),d=n(o);t(d,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    user<span class="token operator">:</span> User<span class="token punctuation">,</span>
    repository<span class="token operator">:</span> UserRepository <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> DBUser <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(o);var c=s(o,8),m=n(c);t(m,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">DBUser</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UserRepository</span> repository
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositoryException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repository <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(c);var l=s(c,10),y=n(l);t(y,()=>`<code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_user</span><span class="token punctuation">(</span>
    user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UserRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">DBUser</span><span class="token punctuation">,</span> <span class="token class-name">RepoErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repository <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),a(l),w(4),h(i,r)}export{q as default,b as metadata};
