import{t as p,a as t,b as r}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as ls,B as o,C as u,D as i,F as n}from"./lc7zKNTw.js";import{h as m}from"./amNWgKlN.js";import{l as Es,s as js}from"./Dq5CK-DW.js";import{P as Rs,H as Ns,a as l,b as v}from"./BhtUnja0.js";import{L as c,H as j}from"./S4V8Aox4.js";const us={title:"Interfaces",description:"Existe alguma forma de tornar um projeto grande fácil de implementar, fácil de testar testar e com segurança de tipos?",created_at:"2023-08-12",updated_at:"2025-02-20",technologies:["TypeScript","Java","Rust"]},{title:la,description:ua,created_at:ia,updated_at:ka,technologies:da}=us;var Cs=p(`Existe alguma forma de tornar um <em>projeto grande</em> fácil de <em>implementar</em>, fácil de testar <em>testar</em> e
com <em>segurança de tipos</em>?`,1),Is=p(`Em qualquer linguagem de programação, dados possuem tipo. Números, texto, binários, todos eles
possuem um <em>tipo específico</em>. Da mesma forma, um objeto pode ser definido por um tipo, referido como <em>interface</em> na maioria das linguagens.`,1),Ds=p("Exemplo de um serviço para criar um usuário, que também exporta os seus <em>stubs</em>",1),Hs=p(`Qualquer função que receba um argumento do tipo <strong>CriarUsuarioServico</strong> pode ser testada usando <strong>criarUsuarioServicoStub</strong> e <strong>criarUsuarioServicoErrorStub</strong> ao invés de mockar todas as
dependências. Isso abstrai a implementação e permite você pensa sobre <strong>entrada</strong> e <strong>saída</strong>.`,1),Ts=p(`Se você aplicar interfaces exaustivamente, a indireção do código torna difícil seguir o código.
Como uma boa prática, use interfaces para: <strong>Recursos externos</strong> (requisições HTTP, conexão com
bancos de dados…) e <strong>injeção de dependência</strong> (Quando os recursos são passados via argumentos
da função, exatamente como no exemplo anterior)`,1),Gs=p("<strong>Valores null</strong>"),Os=p("<strong>Gerenciamento de erros</strong>"),Bs=p("<!> <ul><!> <!></ul>",1),Js=p("Veja o seguinte exemplo em <em>JavaScript</em>:",1),Ls=p("<strong>repository</strong> pode ser null",1),Vs=p("<strong>repository</strong> pode lançar um erro",1),As=p("<strong>user</strong> é um argumento obrigatório",1),Ms=p("Se <strong>user</strong> for corretamente salvo, o usuário salvo é retornado",1),Qs=p(`Sintaxe de anotação que permite <strong>@Nullable</strong> e <strong>@NotNull</strong> (Existem muitas implementações de
diversas bibliotecas)`,1),zs=p("Palavra reservada <strong>throws</strong> para tornar o gerenciamento de error explícito",1),Fs=p("<em>Mockito</em> e bibliotecas similares para mockar injeção de dependências em tempo de execução",1),Ks=p("Não há ponteiro <em>null</em>",1),Ws=p("Estrutura de dado <em>Option</em> para lidar com valores presentes ou ausentes",1),Xs=p("Estrutura de dado <em>Result</em> para lidar com valores de sucesso ou erro",1),Ys=p("<em>Option</em> e <em>Result</em> funcionam como enums, então é necessário lidar com cada caso:",1),Zs=p(`Interfaces, como qualquer <strong>abstração</strong>, pode <em>esconder erros</em>. Se null e erros são <strong>explícitos</strong>,
esses erros podem ser evitados, ao custo de código verboso. Pessoalmente, eu gosto da solução do <strong>Rust</strong>.`,1),sa=p('<!> <!> <!> <!> <blockquote><!></blockquote> <!> <ul><!> <!> <!></ul> <!> <pre class="language-ts"><!></pre> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-js"><!></pre> <!> <ul><!> <!> <!> <!></ul> <!> <!> <pre class="language-ts"><!></pre> <!> <!> <ul><!> <!> <!></ul> <pre class="language-java"><!></pre> <!> <!> <ul><!> <!> <!></ul> <!> <pre class="language-rust"><!></pre> <!> <!>',1);function ma(is,ks){const ds=Es(ks,["children","$$slots","$$events","$$legacy"]);Rs(is,js(()=>ds,us,{children:(ms,aa)=>{var R=sa(),N=ls(R);Ns(N,{children:(a,e)=>{n();var s=r("Interfaces");t(a,s)}});var C=o(N,2);l(C,{children:(a,e)=>{n();var s=Cs();n(8),t(a,s)}});var I=o(C,2);v(I,{children:(a,e)=>{n();var s=r("Tipos De Dado");t(a,s)}});var D=o(I,2);l(D,{children:(a,e)=>{n();var s=Is();n(4),t(a,s)}});var _=o(D,2),vs=u(_);l(vs,{children:(a,e)=>{n();var s=r("Uma interface é um conjunto de operações com argumentos e tipagem de retorno.");t(a,s)}}),i(_);var H=o(_,2);l(H,{children:(a,e)=>{n();var s=r("Isso permite:");t(a,s)}});var $=o(H,2),T=u($);c(T,{children:(a,e)=>{n();var s=r("Múltiplas implementações");t(a,s)}});var G=o(T,2);c(G,{children:(a,e)=>{n();var s=r("Esconder a injeção de dependências");t(a,s)}});var gs=o(G,2);c(gs,{children:(a,e)=>{n();var s=r("Objetos planos para o teste");t(a,s)}}),i($);var O=o($,2);v(O,{children:(a,e)=>{n();var s=r("Por que?");t(a,s)}});var f=o(O,2),_s=u(f);m(_s,()=>`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">CriarUsuarioServico</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoActual<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoErrorStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),i(f);var h=o(f,2),$s=u(h);l($s,{children:(a,e)=>{n();var s=Ds();n(),t(a,s)}}),i(h);var B=o(h,2);l(B,{children:(a,e)=>{n();var s=Hs();n(10),t(a,s)}});var J=o(B,2);v(J,{children:(a,e)=>{n();var s=r("Armadilhas");t(a,s)}});var P=o(J,2),L=u(P);c(L,{children:(a,e)=>{l(a,{children:(s,E)=>{n();var g=Ts();n(4),t(s,g)}})}});var fs=o(L,2);c(fs,{children:(a,e)=>{var s=Bs(),E=ls(s);l(E,{children:(k,cs)=>{n();var d=r("Existe depois problemas que um sistema de tipos pode não cobrir:");t(k,d)}});var g=o(E,2),rs=u(g);c(rs,{children:(k,cs)=>{var d=Gs();t(k,d)},$$slots:{default:!0}});var qs=o(rs,2);c(qs,{children:(k,cs)=>{var d=Os();t(k,d)},$$slots:{default:!0}}),i(g),t(a,s)}}),i(P);var V=o(P,2);v(V,{children:(a,e)=>{n();var s=r("Linguagem por linguagem");t(a,s)}});var A=o(V,2);l(A,{children:(a,e)=>{n();var s=Js();n(2),t(a,s)}});var b=o(A,2),hs=u(b);m(hs,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token parameter">usuario<span class="token punctuation">,</span>
    repositorio<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(b);var M=o(b,2);l(M,{children:(a,e)=>{n();var s=r("Para poder comparar esse código com outras linguagens, suponha:");t(a,s)}});var x=o(M,2),Q=u(x);c(Q,{children:(a,e)=>{var s=Ls();n(),t(a,s)}});var z=o(Q,2);c(z,{children:(a,e)=>{var s=Vs();n(),t(a,s)}});var F=o(z,2);c(F,{children:(a,e)=>{var s=As();n(),t(a,s)}});var Ps=o(F,2);c(Ps,{children:(a,e)=>{n();var s=Ms();n(2),t(a,s)}}),i(x);var K=o(x,2);j(K,{children:(a,e)=>{n();var s=r("Typescript");t(a,s)}});var W=o(K,2);l(W,{children:(a,e)=>{n();var s=r("Typescript supporta tipos de união, o que permite tipar valores requiridos e nulos:");t(a,s)}});var y=o(W,2),bs=u(y);m(bs,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    user<span class="token operator">:</span> Usuario<span class="token punctuation">,</span>
    repository<span class="token operator">:</span> UsuarioRepositorio <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> BDUsuario <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(y);var X=o(y,2);j(X,{children:(a,e)=>{n();var s=r("Java");t(a,s)}});var Y=o(X,2);l(Y,{children:(a,e)=>{n();var s=r("Java provê:");t(a,s)}});var w=o(Y,2),Z=u(w);c(Z,{children:(a,e)=>{n();var s=Qs();n(4),t(a,s)}});var ss=o(Z,2);c(ss,{children:(a,e)=>{n();var s=zs();n(2),t(a,s)}});var xs=o(ss,2);c(xs,{children:(a,e)=>{var s=Fs();n(),t(a,s)}}),i(w);var U=o(w,2),ys=u(U);m(ys,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BDUsuario</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Usuario</span> usuario<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UsuarioRepositorio</span> repositorio
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositorioException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repositorio <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(U);var as=o(U,2);j(as,{children:(a,e)=>{n();var s=r("Rust");t(a,s)}});var ns=o(as,2);l(ns,{children:(a,e)=>{n();var s=r("Rust possui um sistema de tipos único, porque possui:");t(a,s)}});var S=o(ns,2),os=u(S);c(os,{children:(a,e)=>{n();var s=Ks();n(),t(a,s)}});var ts=o(os,2);c(ts,{children:(a,e)=>{n();var s=Ws();n(2),t(a,s)}});var ws=o(ts,2);c(ws,{children:(a,e)=>{n();var s=Xs();n(2),t(a,s)}}),i(S);var es=o(S,2);l(es,{children:(a,e)=>{var s=Ys();n(3),t(a,s)}});var q=o(es,2),Us=u(q);m(Us,()=>`<code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">criar_usuario</span><span class="token punctuation">(</span>
    usuario<span class="token punctuation">:</span> <span class="token class-name">Usuario</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UsuarioRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">BDUsuario</span><span class="token punctuation">,</span> <span class="token class-name">RepoErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repo <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),i(q);var ps=o(q,2);v(ps,{children:(a,e)=>{n();var s=r("Conclusão");t(a,s)}});var Ss=o(ps,2);l(Ss,{children:(a,e)=>{n();var s=Zs();n(8),t(a,s)}}),t(ms,R)},$$slots:{default:!0}}))}export{ma as default,us as metadata};
