import{t as i,b as a}from"./DX_IKd6t.js";import"./BO-ZceVj.js";import{n}from"./B83JZmIy.js";const s={title:"precise_schedule",description:"FLOSS Web Schedule Application",license:"GNU AGPLv3",repository:"https://github.com/joao-arthur/precise_schedule",created_at:"2023-08-11",updated_at:"2025-02-12",languages:["TypeScript"],technologies:["NextJS"],img_url:"/images/precise_schedule.png",app_url:"/app/precise_schedule/index.html"},{title:d,description:h,license:p,repository:u,created_at:g,updated_at:m,languages:f,technologies:b,img_url:k,app_url:_}=s;var r=i(`<h1 id="precise_schedule"><a aria-hidden="true" tabindex="-1" href="#precise_schedule"><span class="icon icon-link"></span></a>precise_schedule</h1> <p>FLOSS Web Schedule Application</p> <h2 id="the-original-project"><a aria-hidden="true" tabindex="-1" href="#the-original-project"><span class="icon icon-link"></span></a>The Original Project</h2> <p>In 2018, I developed a Java schedule application named PreciseSchedule. Back then, I lacked
knowledge about clean code, clean architecture, data structures, and testing. Shortly after
completing the application, I had the urge to rewrite it, applying the knowledge gained.</p> <h2 id="the-rewritings"><a aria-hidden="true" tabindex="-1" href="#the-rewritings"><span class="icon icon-link"></span></a>The Rewritings</h2> <h3 id="2021"><a aria-hidden="true" tabindex="-1" href="#2021"><span class="icon icon-link"></span></a>2021</h3> <ul><li>Finished most of the frontend using <strong>React</strong></li> <li>Made the backend using <strong>NestJS</strong></li></ul> <h3 id="2023"><a aria-hidden="true" tabindex="-1" href="#2023"><span class="icon icon-link"></span></a>2023</h3> <ul><li>Finished the frontend using <strong>NextJS</strong>, and made it work standalone from the backend</li> <li>Applyed <strong>DDD</strong> to create a new backend in <strong>Deno</strong> from the scratch</li></ul> <h3 id="2024"><a aria-hidden="true" tabindex="-1" href="#2024"><span class="icon icon-link"></span></a>2024</h3> <ul><li>I rewrote the <strong>Deno</strong> backend using the structured paradigm and the <strong>Result</strong> data structure
inspired on <strong>Rust</strong></li></ul> <h2 id="the-lessons"><a aria-hidden="true" tabindex="-1" href="#the-lessons"><span class="icon icon-link"></span></a>The Lessons</h2> <p>Through the process, I learned:</p> <ul><li>To shrink the features to their essentials</li> <li>To start development by core functionality</li> <li>That the architecture is more important than the code</li></ul>`,1);function x(e){var t=r();n(26),a(e,t)}export{x as default,s as metadata};
