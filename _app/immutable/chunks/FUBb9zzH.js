import{t,b as o}from"./DX_IKd6t.js";import"./BO-ZceVj.js";import{s as i,k as p,a4 as l,a5 as r,n as c}from"./B83JZmIy.js";import{h as u}from"./D26fQw86.js";const m={title:"libre_game_of_life",description:"FLOSS Implementation of Conway's Game Of Life",license:"GNU AGPLv3",repository:"https://github.com/joao-arthur/libre_game_of_life",created_at:"2023-05-07",updated_at:"2025-02-12",languages:["Rust","TypeScript"],technologies:["Web Assembly","NextJS"],img_url:"/images/libre_game_of_life.png",app_url:"/app/libre_game_of_life/index.html"},{title:b,description:_,license:w,repository:v,created_at:y,updated_at:A,languages:x,technologies:G,img_url:L,app_url:S}=m;var h=t(`<h1 id="libre_game_of_life"><a aria-hidden="true" tabindex="-1" href="#libre_game_of_life"><span class="icon icon-link"></span></a>libre_game_of_life</h1> <p>FLOSS Implementation of Conwayâ€™s Game Of Life</p> <blockquote><p>The <em>Game of Life</em> is a cellular automaton devised by the british mathematician John Horton Conway
in 1970</p></blockquote> <h2 id="rules"><a aria-hidden="true" tabindex="-1" href="#rules"><span class="icon icon-link"></span></a>Rules</h2> <p><em>Game of Life</em> automaton occurs on a grid where each cell can be either <strong>dead</strong> or <strong>alive</strong>. At
each time step, what determines the state of each cell are the following rules:</p> <ul><li><strong>Alive cells</strong> survive with 2 or 3 alive neighbors</li> <li><strong>Dead cells</strong> become alive with 3 alive neighbors</li></ul> <h2 id="my-implementation"><a aria-hidden="true" tabindex="-1" href="#my-implementation"><span class="icon icon-link"></span></a>My implementation</h2> <p>I implemented a version of <em>Game of Life</em> in <em>Rust</em>.</p> <pre class="language-rust"><!></pre> <blockquote><p>In the code above, the implementation of the automaton grid. A <em>HashSet</em> would also work <strong>in this
scenario</strong>, because only alive cells are considered. However, some variations of <em>Game of Life</em> have more states</p></blockquote> <p>When using a <em>HashMap</em>, we decouple the <strong>grid</strong> and the <strong>render</strong>, allowing us to render any part
of the grid, zooming in and out, without affecting the current state.</p> <p>Another aspect is that, we need some <strong>coordinate system</strong> to identify a specific position. The most
simple is the <strong>cartesian plane</strong>, which is the one used.</p> <h3 id="iterating"><a aria-hidden="true" tabindex="-1" href="#iterating"><span class="icon icon-link"></span></a>Iterating</h3> <p>To create the next generation, the current <em>HashMap</em> is traversed, and for each alive cell and its
neighbors, the rules are applied. The resulting alive cells are saved in a new <em>HashMap</em>.</p> <h3 id="the-application"><a aria-hidden="true" tabindex="-1" href="#the-application"><span class="icon icon-link"></span></a>The application</h3> <p>I implemented <em>Game of Life</em> on the web, rendered on a <em>canvas</em>. The project has three layers:</p> <h3 id="lib"><a aria-hidden="true" tabindex="-1" href="#lib"><span class="icon icon-link"></span></a>lib</h3> <p>A reusable, generic implementation of <em>Game of Life</em> in <em>Rust</em>.</p> <h3 id="web_backend"><a aria-hidden="true" tabindex="-1" href="#web_backend"><span class="icon icon-link"></span></a>web_backend</h3> <p>A <em>Web Assembly</em> application that works as a bridge between <em>lib</em> and <em>web_frontend</em>.</p> <h3 id="web_frontend"><a aria-hidden="true" tabindex="-1" href="#web_frontend"><span class="icon icon-link"></span></a>web_frontend</h3> <p>The user application, responsible for render the canvas, the settings, and init the <em>Web Assembly</em>.
Currently, the settings are the following:</p> <ul><li><strong>Preset:</strong> Allows the user to choose from many popular shapes (Glider, Blinker, etc.)</li> <li><strong>Gap:</strong> A visual option, for aesthetics</li> <li><strong>Size:</strong> The amount of zoom in the screen</li> <li><strong>FPS:</strong> The desired FPS for render</li></ul> <h2 id="reference"><a aria-hidden="true" tabindex="-1" href="#reference"><span class="icon icon-link"></span></a>Reference</h2> <p><a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" rel="nofollow">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</a></p>`,1);function T(e){var n=h(),a=i(p(n),16),s=l(a);u(s,()=>`<code class="language-rust"><span class="token keyword">let</span> grid <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),r(a),c(32),o(e,n)}export{T as default,m as metadata};
