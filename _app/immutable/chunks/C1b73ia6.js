import{t as r,a as s,b as l}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as aa,B as t,C as c,D as m,F as n}from"./lc7zKNTw.js";import{h as ea}from"./amNWgKlN.js";import{l as na,s as sa}from"./Dq5CK-DW.js";import{P as ta,H as oa,a as p,b as f,L as i}from"./CEihvC8y.js";import{H as u}from"./CSOcI4nn.js";const D={title:"libre_game_of_life",description:"FLOSS Implementation of Conway's Game Of Life",license:"GNU AGPLv3",repository:"https://github.com/joao-arthur/libre_game_of_life",created_at:"2023-05-07",updated_at:"2025-02-12",programming_languages:["Rust","TypeScript"],technologies:["Web Assembly","NextJS"],img_url:"/images/libre_game_of_life.png",app_url:"/app/libre_game_of_life/index.html"},{title:qa,description:Ia,license:Fa,repository:Ma,created_at:Ra,updated_at:za,programming_languages:Oa,technologies:Wa,img_url:ja,app_url:Ba}=D;var ra=r(`The <em>Game of Life</em> is a cellular automaton devised by the british mathematician John Horton Conway
in 1970`,1),pa=r(`<em>Game of Life</em> automaton occurs on a grid where each cell can be either <strong>dead</strong> or <strong>alive</strong>. At
each time step, what determines the state of each cell are the following rules:`,1),la=r("<strong>Alive cells</strong> survive with 2 or 3 alive neighbors",1),ia=r("<strong>Dead cells</strong> become alive with 3 alive neighbors",1),ca=r("I implemented a version of <em>Game of Life</em> in <em>Rust</em>.",1),ma=r(`In the code above, the implementation of the automaton grid. A <em>HashSet</em> would also work <strong>in this
scenario</strong>, because only alive cells are considered. However, some variations of <em>Game of Life</em> have more states`,1),ua=r(`When using a <em>HashMap</em>, we decouple the <strong>grid</strong> and the <strong>render</strong>, allowing us to render any part
of the grid, zooming in and out, without affecting the current state.`,1),da=r(`Another aspect is that, we need some <strong>coordinate system</strong> to identify a specific position. The most
simple is the <strong>cartesian plane</strong>, which is the one used.`,1),_a=r(`To create the next generation, the current <em>HashMap</em> is traversed, and for each alive cell and its
neighbors, the rules are applied. The resulting alive cells are saved in a new <em>HashMap</em>.`,1),ha=r("I implemented <em>Game of Life</em> on the web, rendered on a <em>canvas</em>. The project has three layers:",1),va=r("A reusable, generic implementation of <em>Game of Life</em> in <em>Rust</em>.",1),ga=r("A <em>Web Assembly</em> application that works as a bridge between <em>lib</em> and <em>web_frontend</em>.",1),fa=r(`The user application, responsible for render the canvas, the settings, and init the <em>Web Assembly</em>.
Currently, the settings are the following:`,1),ka=r("<strong>Preset:</strong> Allows the user to choose from many popular shapes (Glider, Blinker, etc.)",1),$a=r("<strong>Gap:</strong> A visual option, for aesthetics",1),ba=r("<strong>Size:</strong> The amount of zoom in the screen",1),Pa=r("<strong>FPS:</strong> The desired FPS for render",1),wa=r('<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" rel="nofollow">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</a>'),ya=r('<!> <!> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-rust"><!></pre> <blockquote><!></blockquote> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <ul><!> <!> <!> <!></ul> <!> <!>',1);function Da(J,N){const U=na(N,["children","$$slots","$$events","$$legacy"]);ta(J,sa(()=>U,D,{children:(E,La)=>{var k=ya(),$=aa(k);oa($,{children:(a,o)=>{n();var e=l("libre_game_of_life");s(a,e)}});var b=t($,2);p(b,{children:(a,o)=>{n();var e=l("FLOSS Implementation of Conwayâ€™s Game Of Life");s(a,e)}});var d=t(b,2),K=c(d);p(K,{children:(a,o)=>{n();var e=ra();n(2),s(a,e)}}),m(d);var P=t(d,2);f(P,{children:(a,o)=>{n();var e=l("Rules");s(a,e)}});var w=t(P,2);p(w,{children:(a,o)=>{var e=pa();n(5),s(a,e)}});var _=t(w,2),y=c(_);i(y,{children:(a,o)=>{var e=la();n(),s(a,e)}});var Q=t(y,2);i(Q,{children:(a,o)=>{var e=ia();n(),s(a,e)}}),m(_);var L=t(_,2);f(L,{children:(a,o)=>{n();var e=l("My implementation");s(a,e)}});var x=t(L,2);p(x,{children:(a,o)=>{n();var e=ca();n(4),s(a,e)}});var h=t(x,2),V=c(h);ea(V,()=>`<code class="language-rust"><span class="token keyword">let</span> grid <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),m(h);var v=t(h,2),X=c(v);p(X,{children:(a,o)=>{n();var e=ma();n(6),s(a,e)}}),m(v);var A=t(v,2);p(A,{children:(a,o)=>{n();var e=ua();n(6),s(a,e)}});var G=t(A,2);p(G,{children:(a,o)=>{n();var e=da();n(4),s(a,e)}});var S=t(G,2);u(S,{children:(a,o)=>{n();var e=l("Iterating");s(a,e)}});var H=t(S,2);p(H,{children:(a,o)=>{n();var e=_a();n(4),s(a,e)}});var C=t(H,2);u(C,{children:(a,o)=>{n();var e=l("The application");s(a,e)}});var T=t(C,2);p(T,{children:(a,o)=>{n();var e=ha();n(4),s(a,e)}});var q=t(T,2);u(q,{children:(a,o)=>{n();var e=l("lib");s(a,e)}});var I=t(q,2);p(I,{children:(a,o)=>{n();var e=va();n(4),s(a,e)}});var F=t(I,2);u(F,{children:(a,o)=>{n();var e=l("web_backend");s(a,e)}});var M=t(F,2);p(M,{children:(a,o)=>{n();var e=ga();n(6),s(a,e)}});var R=t(M,2);u(R,{children:(a,o)=>{n();var e=l("web_frontend");s(a,e)}});var z=t(R,2);p(z,{children:(a,o)=>{n();var e=fa();n(2),s(a,e)}});var g=t(z,2),O=c(g);i(O,{children:(a,o)=>{var e=ka();n(),s(a,e)}});var W=t(O,2);i(W,{children:(a,o)=>{var e=$a();n(),s(a,e)}});var j=t(W,2);i(j,{children:(a,o)=>{var e=ba();n(),s(a,e)}});var Y=t(j,2);i(Y,{children:(a,o)=>{var e=Pa();n(),s(a,e)}}),m(g);var B=t(g,2);f(B,{children:(a,o)=>{n();var e=l("Reference");s(a,e)}});var Z=t(B,2);p(Z,{children:(a,o)=>{var e=wa();s(a,e)}}),s(E,k)},$$slots:{default:!0}}))}export{Da as default,D as metadata};
