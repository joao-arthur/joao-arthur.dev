import{t as r,a as n,b as l}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as aa,B as e,C as c,D as m,F as o}from"./lc7zKNTw.js";import{h as sa}from"./amNWgKlN.js";import{l as oa,s as na}from"./Dq5CK-DW.js";import{P as ea,H as ta,a as p,b as $,L as i}from"./CEihvC8y.js";import{H as u}from"./CSOcI4nn.js";const W={title:"libre_game_of_life",description:"Implementação FLOSS do Jogo da Vida de Conway",license:"GNU AGPLv3",repository:"https://github.com/joao-arthur/libre_game_of_life",created_at:"2023-05-07",updated_at:"2025-02-12",programming_languages:["Rust","TypeScript"],technologies:["Web Assembly","Svelte"],img_url:"/images/libre_game_of_life.png",app_url:"/app/libre_game_of_life/index.html"},{title:La,description:Va,license:Oa,repository:Ga,created_at:Ua,updated_at:Fa,programming_languages:Ma,technologies:Ra,img_url:ja,app_url:Ia}=W;var ra=r("O <em>Jogo da Vida</em> é um autômato celular criado pelo matemático britânico John Horton Conway em 1970",1),pa=r(`O autômato <em>Jogo da Vida</em> ocorre em um grid onde cada célula pode estar ou <strong>viva</strong> ou <strong>morta</strong>. A
cada etapa de tempo, o que determina o estado de cada célula são as seguintes regras:`,1),la=r("<strong>Células vivas</strong> sobrevivem com 2 ou 3 vizinhos vivos",1),ia=r("<strong>Células mortas</strong> se tornam vivas com 3 vizinhos vivos",1),ca=r("Eu implementei uma versão do <em>Jogo da Vida</em> em <em>Rust</em>.",1),ma=r(`No código acima, a implementação da grid do autômato. Um <em>HashSet</em> também iria funcionar <strong>nesse
cenário</strong>, porque apenas células vivas são consideradas. Porém, algumas variações do Jogo da Vida
possuem mais estados`,1),ua=r(`Usando um <em>HashMap</em>, nós desacoplamos a <strong>grid</strong> e a <strong>renderização</strong>, permetindo a nós renderizar
qualquer parde do grid, aproximar e afastar o zoom, sem afetar o estado atual.`,1),da=r(`Outro aspecto é que, precisamos de algum <strong>sistema de coordenadas</strong> para identificar uma posição
específica. A mais simples é o <strong>plano cartesiano</strong>, que é o que foi usado.`,1),_a=r(`Para criar a próxima geração, o <em>HashMap</em> atual é percorrido, e para célula viva e seus vizinhos, as
regras são aplicadas. As células vivas resultantes são então salvas em um novo <em>HashMap</em>.`,1),va=r("Eu implementei o <em>Jogo da Vida</em> na web, renderizado em um <em>canvas</em>. O projeto possui três camadas:",1),ga=r("Uma implementação genérica e reutilizável do <em>Jogo da Vida</em> em <em>Rust</em>.",1),ka=r("Uma aplicação <em>Web Assembly</em> que funciona como uma ponte entre a <em>lib</em> e o <em>web_frontend</em>",1),$a=r(`A aplicação do usuário, responsável por renderizar o canvas, as configurações, e inicializar o <em>Web
Assembly</em>. Atualmente, as configurações são as seguintes:`,1),fa=r("<strong>Preset:</strong> Permite ao usuário escolher entre muitas formas populares (Glider, Blinkder, etc.)",1),ha=r("<strong>Gap:</strong> Uma opção visual, por estética",1),Pa=r("<strong>Size:</strong> A quantidade de zoom na tela",1),ba=r("<strong>FPS:</strong> O FPS desejado para a renderização",1),xa=r('<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" rel="nofollow">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</a>'),qa=r('<!> <!> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-rust"><!></pre> <blockquote><!></blockquote> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <ul><!> <!> <!> <!></ul> <!> <!>',1);function Wa(B,E){const N=oa(E,["children","$$slots","$$events","$$legacy"]);ea(B,na(()=>N,W,{children:(D,wa)=>{var f=qa(),h=aa(f);ta(h,{children:(a,t)=>{o();var s=l("libre_game_of_life");n(a,s)}});var P=e(h,2);p(P,{children:(a,t)=>{o();var s=l("Implementação FLOSS do Jogo da Vida de Conway");n(a,s)}});var d=e(P,2),T=c(d);p(T,{children:(a,t)=>{o();var s=ra();o(2),n(a,s)}}),m(d);var b=e(d,2);$(b,{children:(a,t)=>{o();var s=l("Regras");n(a,s)}});var x=e(b,2);p(x,{children:(a,t)=>{o();var s=pa();o(6),n(a,s)}});var _=e(x,2),q=c(_);i(q,{children:(a,t)=>{var s=la();o(),n(a,s)}});var K=e(q,2);i(K,{children:(a,t)=>{var s=ia();o(),n(a,s)}}),m(_);var w=e(_,2);$(w,{children:(a,t)=>{o();var s=l("Minha implementação");n(a,s)}});var y=e(w,2);p(y,{children:(a,t)=>{o();var s=ca();o(4),n(a,s)}});var v=e(y,2),Q=c(v);sa(Q,()=>`<code class="language-rust"><span class="token keyword">let</span> grid <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name">Coordinate</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Alive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),m(v);var g=e(v,2),X=c(g);p(X,{children:(a,t)=>{o();var s=ma();o(4),n(a,s)}}),m(g);var A=e(g,2);p(A,{children:(a,t)=>{o();var s=ua();o(6),n(a,s)}});var z=e(A,2);p(z,{children:(a,t)=>{o();var s=da();o(4),n(a,s)}});var S=e(z,2);u(S,{children:(a,t)=>{o();var s=l("Iterando");n(a,s)}});var C=e(S,2);p(C,{children:(a,t)=>{o();var s=_a();o(4),n(a,s)}});var H=e(C,2);u(H,{children:(a,t)=>{o();var s=l("A aplicação");n(a,s)}});var J=e(H,2);p(J,{children:(a,t)=>{o();var s=va();o(4),n(a,s)}});var L=e(J,2);u(L,{children:(a,t)=>{o();var s=l("lib");n(a,s)}});var V=e(L,2);p(V,{children:(a,t)=>{o();var s=ga();o(4),n(a,s)}});var O=e(V,2);u(O,{children:(a,t)=>{o();var s=l("web_backend");n(a,s)}});var G=e(O,2);p(G,{children:(a,t)=>{o();var s=ka();o(5),n(a,s)}});var U=e(G,2);u(U,{children:(a,t)=>{o();var s=l("web_frontend");n(a,s)}});var F=e(U,2);p(F,{children:(a,t)=>{o();var s=$a();o(2),n(a,s)}});var k=e(F,2),M=c(k);i(M,{children:(a,t)=>{var s=fa();o(),n(a,s)}});var R=e(M,2);i(R,{children:(a,t)=>{var s=ha();o(),n(a,s)}});var j=e(R,2);i(j,{children:(a,t)=>{var s=Pa();o(),n(a,s)}});var Y=e(j,2);i(Y,{children:(a,t)=>{var s=ba();o(),n(a,s)}}),m(k);var I=e(k,2);$(I,{children:(a,t)=>{o();var s=l("Referência");n(a,s)}});var Z=e(I,2);p(Z,{children:(a,t)=>{var s=xa();n(a,s)}}),n(D,f)},$$slots:{default:!0}}))}export{Wa as default,W as metadata};
