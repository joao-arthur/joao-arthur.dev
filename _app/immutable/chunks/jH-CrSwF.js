import{t as v,a as f}from"./WeQXqaOV.js";import"./DZ-DIwRQ.js";import{A as s,B as b,C as a,D as n,F as w}from"./Bbc5DNbi.js";import{h as o}from"./BUU-BBpD.js";const y={title:"Interfaces",description:"Existe alguma forma de tornar um projeto grande fácil de implementar, fácil de testar testar e com segurança de tipos?",created_at:"2023-08-12",updated_at:"2025-02-20",technologies:["TypeScript","Java","Rust"]},{title:q,description:j,created_at:R,updated_at:_,technologies:N}=y;var h=v(`<h1>Interfaces</h1> <p>Existe alguma forma de tornar um <em>projeto grande</em> fácil de <em>implementar</em>, fácil de testar <em>testar</em> e
com <em>segurança de tipos</em>?</p> <h2>Tipos De Dado</h2> <p>Em qualquer linguagem de programação, dados possuem tipo. Números, texto, binários, todos eles
possuem um <em>tipo específico</em>. Da mesma forma, um objeto pode ser definido por um tipo, referido como <em>interface</em> na maioria das linguagens.</p> <blockquote><p>Uma interface é um conjunto de operações com argumentos e tipagem de retorno.</p></blockquote> <p>Isso permite:</p> <ul><li>Múltiplas implementações</li> <li>Esconder a injeção de dependências</li> <li>Objetos planos para o teste</li></ul> <h2>Por que?</h2> <pre class="language-ts"><!></pre> <blockquote><p>Exemplo de um serviço para criar um usuário, que também exporta os seus <em>stubs</em></p></blockquote> <p>Qualquer função que receba um argumento do tipo <strong>CriarUsuarioServico</strong> pode ser testada usando <strong>criarUsuarioServicoStub</strong> e <strong>criarUsuarioServicoErrorStub</strong> ao invés de mockar todas as
dependências. Isso abstrai a implementação e permite você pensa sobre <strong>entrada</strong> e <strong>saída</strong>.</p> <h2>Armadilhas</h2> <ul><li><p>Se você aplicar interfaces exaustivamente, a indireção do código torna difícil seguir o código.
Como uma boa prática, use interfaces para: <strong>Recursos externos</strong> (requisições HTTP, conexão com
bancos de dados…) e <strong>injeção de dependência</strong> (Quando os recursos são passados via argumentos
da função, exatamente como no exemplo anterior)</p></li> <li><p>Existe depois problemas que um sistema de tipos pode não cobrir:</p> <ul><li><strong>Valores null</strong></li> <li><strong>Gerenciamento de erros</strong></li></ul></li></ul> <h2>Linguagem por linguagem</h2> <p>Veja o seguinte exemplo em <em>JavaScript</em>:</p> <pre class="language-js"><!></pre> <p>Para poder comparar esse código com outras linguagens, suponha:</p> <ul><li><strong>repository</strong> pode ser null</li> <li><strong>repository</strong> pode lançar um erro</li> <li><strong>user</strong> é um argumento obrigatório</li> <li>Se <strong>user</strong> for corretamente salvo, o usuário salvo é retornado</li></ul> <h3>Typescript</h3> <p>Typescript supporta tipos de união, o que permite tipar valores requiridos e nulos:</p> <pre class="language-ts"><!></pre> <h3>Java</h3> <p>Java provê:</p> <ul><li>Sintaxe de anotação que permite <strong>@Nullable</strong> e <strong>@NotNull</strong> (Existem muitas implementações de
diversas bibliotecas)</li> <li>Palavra reservada <strong>throws</strong> para tornar o gerenciamento de error explícito</li> <li><em>Mockito</em> e bibliotecas similares para mockar injeção de dependências em tempo de execução</li></ul> <pre class="language-java"><!></pre> <h3>Rust</h3> <p>Rust possui um sistema de tipos único, porque possui:</p> <ul><li>Não há ponteiro <em>null</em></li> <li>Estrutura de dado <em>Option</em> para lidar com valores presentes ou ausentes</li> <li>Estrutura de dado <em>Result</em> para lidar com valores de sucesso ou erro</li></ul> <p><em>Option</em> e <em>Result</em> funcionam como enums, então é necessário lidar com cada caso:</p> <pre class="language-rust"><!></pre> <h2>Conclusão</h2> <p>Interfaces, como qualquer <strong>abstração</strong>, pode <em>esconder erros</em>. Se null e erros são <strong>explícitos</strong>,
esses erros podem ser evitados, ao custo de código verboso. Pessoalmente, eu gosto da solução do <strong>Rust</strong>.</p>`,1);function C(i){var c=h(),t=s(b(c),16),l=a(t);o(l,()=>`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">CriarUsuarioServico</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoActual<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoErrorStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),n(t);var p=s(t,14),k=a(p);o(k,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token parameter">usuario<span class="token punctuation">,</span>
    repositorio<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),n(p);var e=s(p,10),d=a(e);o(d,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    user<span class="token operator">:</span> Usuario<span class="token punctuation">,</span>
    repository<span class="token operator">:</span> UsuarioRepositorio <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> BDUsuario <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),n(e);var r=s(e,8),m=a(r);o(m,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BDUsuario</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Usuario</span> usuario<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UsuarioRepositorio</span> repositorio
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositorioException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repositorio <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),n(r);var u=s(r,10),g=a(u);o(g,()=>`<code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">criar_usuario</span><span class="token punctuation">(</span>
    usuario<span class="token punctuation">:</span> <span class="token class-name">Usuario</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UsuarioRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">BDUsuario</span><span class="token punctuation">,</span> <span class="token class-name">RepoErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repo <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),n(u),w(4),f(i,c)}export{C as default,y as metadata};
