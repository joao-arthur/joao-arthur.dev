import{t as p,a as e,b as r}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as ls,B as t,C as u,D as i,F as a}from"./lc7zKNTw.js";import{h as v}from"./amNWgKlN.js";import{l as Is,s as Rs}from"./Dq5CK-DW.js";import{P as js,H as Ns,a as l,b as m}from"./BhtUnja0.js";import{L as c,H as R}from"./S4V8Aox4.js";const us={title:"Interfaces",description:"Is there a way to make a big project easy to implement, easy to test and type-safe?",created_at:"2023-08-12",updated_at:"2025-02-20",technologies:["TypeScript","Java","Rust"]},{title:ln,description:un,created_at:kn,updated_at:dn,technologies:vn}=us;var Ts=p("Is there a way to make a <em>big project</em> easy to <em>implement</em>, easy to <em>test</em> and <em>type-safe</em>?",1),Es=p(`In any programming language, data has types. Numbers, text, binaries, all of them have a <em>specific
type</em>. The same way, an object can be defined by a type, referred to as an <em>interface</em> in most
languages.`,1),Cs=p("Sample service to create a user, that also exports its <em>stubs</em>",1),Gs=p(`Any functions that has a <strong>CreateUserService</strong> argument can be tested using <strong>createUserServiceStub</strong> and <strong>createUserServiceErrorStub</strong> instead of mocking all dependencies.
This abstracts implementation and let you think about <strong>input</strong> and <strong>output</strong>.`,1),Hs=p(`If you apply interfaces exhaustively, the indirection makes it hard to follow the code. As a rule
of thumb, use interfaces for: <strong>External resources</strong> (HTTP requests, database connectionsâ€¦) and <strong>dependency injection</strong> (When these resources are passed as arguments of functions, as in the
previous example)`,1),As=p("<strong>Null values</strong>"),Bs=p("<strong>Error handling</strong>"),Ds=p("<!> <ul><!> <!></ul>",1),Ls=p("Take the following example in <em>JavaScript</em>:",1),Js=p("<strong>repository</strong> can be null",1),Os=p("<strong>repository</strong> can throw an error",1),Ms=p("<strong>user</strong> is an required argument",1),Vs=p("If <strong>user</strong> is correctly saved, the saved user is returned",1),Ws=p(`Annotation syntax that allows for <code>@Nullable</code> and <code>@NotNull</code> (There are many implementations from
different libs)`,1),zs=p("<strong>throws</strong> keyword to make error handling explicit",1),Fs=p("<em>Mockito</em> and similar libraries to mock injected dependencies during runtime",1),Ks=p("No <em>null</em> pointer",1),Qs=p("<em>Option</em> data structure to handle present or absent values",1),Xs=p("<em>Result</em> data structure to handle success or error values",1),Ys=p("The <em>Option</em> and <em>Result</em> are enums, so it is necessary to handle each case:",1),Zs=p(`Interfaces, like any <strong>abstraction</strong>, can <em>hide errors</em>. If null and errors are <strong>explicit</strong>, these
errors can be avoided, at the cost of verbose code. Personally, I like the <strong>Rust</strong> solution.`,1),sn=p('<!> <!> <!> <!> <blockquote><!></blockquote> <!> <ul><!> <!> <!></ul> <!> <pre class="language-ts"><!></pre> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-js"><!></pre> <!> <ul><!> <!> <!> <!></ul> <!> <!> <pre class="language-ts"><!></pre> <!> <!> <ul><!> <!> <!></ul> <pre class="language-java"><!></pre> <!> <!> <ul><!> <!> <!></ul> <!> <pre class="language-rust"><!></pre> <!> <!>',1);function mn(is,ks){const ds=Is(ks,["children","$$slots","$$events","$$legacy"]);js(is,Rs(()=>ds,us,{children:(vs,nn)=>{var j=sn(),N=ls(j);Ns(N,{children:(n,o)=>{a();var s=r("Interfaces");e(n,s)}});var T=t(N,2);l(T,{children:(n,o)=>{a();var s=Ts();a(8),e(n,s)}});var E=t(T,2);m(E,{children:(n,o)=>{a();var s=r("Data Types");e(n,s)}});var C=t(E,2);l(C,{children:(n,o)=>{a();var s=Es();a(4),e(n,s)}});var g=t(C,2),ms=u(g);l(ms,{children:(n,o)=>{a();var s=r("An interface is a set of operations with arguments and return types.");e(n,s)}}),i(g);var G=t(g,2);l(G,{children:(n,o)=>{a();var s=r("This allows for:");e(n,s)}});var y=t(G,2),H=u(y);c(H,{children:(n,o)=>{a();var s=r("Multiple implementations");e(n,s)}});var A=t(H,2);c(A,{children:(n,o)=>{a();var s=r("Hide dependency injection");e(n,s)}});var _s=t(A,2);c(_s,{children:(n,o)=>{a();var s=r("Plain objects for testing");e(n,s)}}),i(y);var B=t(y,2);m(B,{children:(n,o)=>{a();var s=r("Why?");e(n,s)}});var h=t(B,2),gs=u(h);v(gs,()=>`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">CreateUserService</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceActual<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceErrorStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),i(h);var $=t(h,2),ys=u($);l(ys,{children:(n,o)=>{a();var s=Cs();a(),e(n,s)}}),i($);var D=t($,2);l(D,{children:(n,o)=>{a();var s=Gs();a(10),e(n,s)}});var L=t(D,2);m(L,{children:(n,o)=>{a();var s=r("Pitfalls");e(n,s)}});var f=t(L,2),J=u(f);c(J,{children:(n,o)=>{l(n,{children:(s,I)=>{a();var _=Hs();a(4),e(s,_)}})}});var hs=t(J,2);c(hs,{children:(n,o)=>{var s=Ds(),I=ls(s);l(I,{children:(k,cs)=>{a();var d=r("There is two problems that a type-system may not cover:");e(k,d)}});var _=t(I,2),rs=u(_);c(rs,{children:(k,cs)=>{var d=As();e(k,d)},$$slots:{default:!0}});var qs=t(rs,2);c(qs,{children:(k,cs)=>{var d=Bs();e(k,d)},$$slots:{default:!0}}),i(_),e(n,s)}}),i(f);var O=t(f,2);m(O,{children:(n,o)=>{a();var s=r("Language By Language");e(n,s)}});var M=t(O,2);l(M,{children:(n,o)=>{a();var s=Ls();a(2),e(n,s)}});var w=t(M,2),$s=u(w);v($s,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token parameter">user<span class="token punctuation">,</span>
    repository<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(w);var V=t(w,2);l(V,{children:(n,o)=>{a();var s=r("In order to compare this code to another languages, suppose:");e(n,s)}});var P=t(V,2),W=u(P);c(W,{children:(n,o)=>{var s=Js();a(),e(n,s)}});var z=t(W,2);c(z,{children:(n,o)=>{var s=Os();a(),e(n,s)}});var F=t(z,2);c(F,{children:(n,o)=>{var s=Ms();a(),e(n,s)}});var fs=t(F,2);c(fs,{children:(n,o)=>{a();var s=Vs();a(2),e(n,s)}}),i(P);var K=t(P,2);R(K,{children:(n,o)=>{a();var s=r("TypeScript");e(n,s)}});var Q=t(K,2);l(Q,{children:(n,o)=>{a();var s=r("TypeScript supports union types, that allow typing required and null values:");e(n,s)}});var b=t(Q,2),ws=u(b);v(ws,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    user<span class="token operator">:</span> User<span class="token punctuation">,</span>
    repository<span class="token operator">:</span> UserRepository <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> DBUser <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(b);var X=t(b,2);R(X,{children:(n,o)=>{a();var s=r("Java");e(n,s)}});var Y=t(X,2);l(Y,{children:(n,o)=>{a();var s=r("Java provides:");e(n,s)}});var x=t(Y,2),Z=u(x);c(Z,{children:(n,o)=>{a();var s=Ws();a(4),e(n,s)}});var ss=t(Z,2);c(ss,{children:(n,o)=>{var s=zs();a(),e(n,s)}});var Ps=t(ss,2);c(Ps,{children:(n,o)=>{var s=Fs();a(),e(n,s)}}),i(x);var U=t(x,2),bs=u(U);v(bs,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">DBUser</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UserRepository</span> repository
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositoryException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repository <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(U);var ns=t(U,2);R(ns,{children:(n,o)=>{a();var s=r("Rust");e(n,s)}});var as=t(ns,2);l(as,{children:(n,o)=>{a();var s=r("Rust has a unique type-system because it has:");e(n,s)}});var S=t(as,2),ts=u(S);c(ts,{children:(n,o)=>{a();var s=Ks();a(2),e(n,s)}});var es=t(ts,2);c(es,{children:(n,o)=>{var s=Qs();a(),e(n,s)}});var xs=t(es,2);c(xs,{children:(n,o)=>{var s=Xs();a(),e(n,s)}}),i(S);var os=t(S,2);l(os,{children:(n,o)=>{a();var s=Ys();a(4),e(n,s)}});var q=t(os,2),Us=u(q);v(Us,()=>`<code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_user</span><span class="token punctuation">(</span>
    user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UserRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">DBUser</span><span class="token punctuation">,</span> <span class="token class-name">RepoErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repository <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),i(q);var ps=t(q,2);m(ps,{children:(n,o)=>{a();var s=r("Conclusion");e(n,s)}});var Ss=t(ps,2);l(Ss,{children:(n,o)=>{a();var s=Zs();a(8),e(n,s)}}),e(vs,j)},$$slots:{default:!0}}))}export{mn as default,us as metadata};
