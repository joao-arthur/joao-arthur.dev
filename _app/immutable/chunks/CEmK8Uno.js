import{t as p,a as e,b as r}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as us,B as t,C as u,D as i,F as a}from"./lc7zKNTw.js";import{h as v}from"./amNWgKlN.js";import{l as js,s as qs}from"./Dq5CK-DW.js";import{P as Ts,H as Cs,a as l,b as m,L as c}from"./BFg717ej.js";import{H as j}from"./CRleMo7l.js";const is={title:"Interfaces",description:"Is there a way to make a big project easy to implement, easy to test and type-safe?",created_at:"2023-08-12",updated_at:"2025-02-27",technologies:["JavaScript","TypeScript","Java","Rust"]},{title:un,description:kn,created_at:dn,updated_at:vn,technologies:mn}=is;var Is=p("Is there a way to make a <em>big project</em> easy to <em>implement</em>, easy to <em>test</em> and <em>type-safe</em>?",1),Ns=p(`In any programming language, data has types. Numbers, text, binaries, all of them have a <em>specific
type</em>. In the same way, an object can be defined by a type, referred to as an <em>interface</em> in most
languages.`,1),Gs=p("Sample service to create a user, that also exports its <em>stubs</em>",1),Hs=p(`Any function that receives a <strong>CreateUserService</strong> argument can be tested using <strong>createUserServiceStub</strong> and <strong>createUserServiceErrorStub</strong> instead of mocking all dependencies.
This abstracts implementation and leaves room for you to think about <strong>input</strong> and <strong>output</strong>.`,1),As=p(`If you apply interfaces exhaustively, the indirection makes it hard to follow the code. As a rule
of thumb, use interfaces for: <strong>External resources</strong> (HTTP requests, database connectionsâ€¦) and <strong>dependency injection</strong> (When these resources are passed as arguments of functions, as in the
previous example)`,1),Ms=p("<strong>Null values</strong>"),Bs=p("<strong>Error handling</strong>"),Ds=p("<!> <ul><!> <!></ul>",1),Js=p("Take the following example in <em>JavaScript</em>:",1),Ls=p("<strong>repository</strong> can be null",1),Os=p("<strong>repository</strong> can throw an error",1),Vs=p("<strong>user</strong> is a required argument",1),Ws=p("If <strong>user</strong> is correctly saved, the saved user is returned",1),zs=p("<strong>throws</strong> keyword to make error handling explicit",1),Fs=p("<em>Mockito</em> and similar libraries to mock injected dependencies during runtime",1),Ks=p("No <em>null</em> pointer",1),Qs=p("<em>Option</em> data structure to handle present or absent values",1),Xs=p("<em>Result</em> data structure to handle success or error values",1),Ys=p(`The <em>Option</em> and <em>Result</em> are enums, and because Rust demands enum exhaustiveness, this forces the
developer to handle each case:`,1),Zs=p(`The more rigorous a type system of a programming language, the less prone to errors and the more
verbose the code. <strong>Interfaces</strong> are powerful tools, but they can <strong>hide errors and null values</strong>,
according to the programming language.`,1),sn=p(`The way of handling these limitations will depend mostly on what is the tolerance to bugs of the
project, however objectively, a software with fewer bugs is <strong>better</strong>.`,1),nn=p('<!> <!> <!> <!> <blockquote><!></blockquote> <!> <ul><!> <!> <!></ul> <!> <pre class="language-ts"><!></pre> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-js"><!></pre> <!> <ul><!> <!> <!> <!></ul> <!> <!> <pre class="language-ts"><!></pre> <!> <!> <ul><!> <!> <!></ul> <pre class="language-java"><!></pre> <!> <!> <ul><!> <!> <!></ul> <!> <pre class="language-rust"><!></pre> <!> <!> <!>',1);function gn(ks,ds){const vs=js(ds,["children","$$slots","$$events","$$legacy"]);Ts(ks,qs(()=>vs,is,{children:(ms,an)=>{var q=nn(),T=us(q);Cs(T,{children:(n,o)=>{a();var s=r("Interfaces");e(n,s)}});var C=t(T,2);l(C,{children:(n,o)=>{a();var s=Is();a(8),e(n,s)}});var I=t(C,2);m(I,{children:(n,o)=>{a();var s=r("Data Types");e(n,s)}});var N=t(I,2);l(N,{children:(n,o)=>{a();var s=Ns();a(4),e(n,s)}});var _=t(N,2),gs=u(_);l(gs,{children:(n,o)=>{a();var s=r("An interface is a set of operations with arguments and return types.");e(n,s)}}),i(_);var G=t(_,2);l(G,{children:(n,o)=>{a();var s=r("This allows for:");e(n,s)}});var h=t(G,2),H=u(h);c(H,{children:(n,o)=>{a();var s=r("Multiple implementations");e(n,s)}});var A=t(H,2);c(A,{children:(n,o)=>{a();var s=r("Hide dependency injection");e(n,s)}});var _s=t(A,2);c(_s,{children:(n,o)=>{a();var s=r("Plain objects for testing");e(n,s)}}),i(h);var M=t(h,2);m(M,{children:(n,o)=>{a();var s=r("Why?");e(n,s)}});var y=t(M,2),hs=u(y);v(hs,()=>`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">CreateUserService</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceActual<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        user<span class="token operator">:</span> UserCreate<span class="token punctuation">,</span>
        validator<span class="token operator">:</span> UserValidator<span class="token punctuation">,</span>
        idGenerator<span class="token operator">:</span> IdGenerator<span class="token punctuation">,</span>
        passwordGenerator<span class="token operator">:</span> PasswordGenerator<span class="token punctuation">,</span>
        repository<span class="token operator">:</span> UserRepository<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createUserServiceErrorStub<span class="token operator">:</span> CreateUserService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),i(y);var $=t(y,2),ys=u($);l(ys,{children:(n,o)=>{a();var s=Gs();a(),e(n,s)}}),i($);var B=t($,2);l(B,{children:(n,o)=>{a();var s=Hs();a(10),e(n,s)}});var D=t(B,2);m(D,{children:(n,o)=>{a();var s=r("Pitfalls");e(n,s)}});var f=t(D,2),J=u(f);c(J,{children:(n,o)=>{l(n,{children:(s,E)=>{a();var g=As();a(4),e(s,g)}})}});var $s=t(J,2);c($s,{children:(n,o)=>{var s=Ds(),E=us(s);l(E,{children:(k,ls)=>{a();var d=r("There is two problems that a type-system may not cover:");e(k,d)}});var g=t(E,2),cs=u(g);c(cs,{children:(k,ls)=>{var d=Ms();e(k,d)},$$slots:{default:!0}});var Es=t(cs,2);c(Es,{children:(k,ls)=>{var d=Bs();e(k,d)},$$slots:{default:!0}}),i(g),e(n,s)}}),i(f);var L=t(f,2);m(L,{children:(n,o)=>{a();var s=r("Language By Language");e(n,s)}});var O=t(L,2);l(O,{children:(n,o)=>{a();var s=Js();a(2),e(n,s)}});var w=t(O,2),fs=u(w);v(fs,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token parameter">user<span class="token punctuation">,</span>
    repository<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(w);var V=t(w,2);l(V,{children:(n,o)=>{a();var s=r("To compare this code with other programming languages, suppose:");e(n,s)}});var b=t(V,2),W=u(b);c(W,{children:(n,o)=>{var s=Ls();a(),e(n,s)}});var z=t(W,2);c(z,{children:(n,o)=>{var s=Os();a(),e(n,s)}});var F=t(z,2);c(F,{children:(n,o)=>{var s=Vs();a(),e(n,s)}});var ws=t(F,2);c(ws,{children:(n,o)=>{a();var s=Ws();a(2),e(n,s)}}),i(b);var K=t(b,2);j(K,{children:(n,o)=>{a();var s=r("TypeScript");e(n,s)}});var Q=t(K,2);l(Q,{children:(n,o)=>{a();var s=r("TypeScript supports union types, that allow typing required and null values:");e(n,s)}});var P=t(Q,2),bs=u(P);v(bs,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    user<span class="token operator">:</span> User<span class="token punctuation">,</span>
    repository<span class="token operator">:</span> UserRepository <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> DBUser <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(P);var X=t(P,2);j(X,{children:(n,o)=>{a();var s=r("Java");e(n,s)}});var Y=t(X,2);l(Y,{children:(n,o)=>{a();var s=r("Java provides:");e(n,s)}});var x=t(Y,2),Z=u(x);c(Z,{children:(n,o)=>{a();var s=r(`Annotation syntax that allows for required and nullable values, although there is no
implementation of this in the standard library`);e(n,s)}});var ss=t(Z,2);c(ss,{children:(n,o)=>{var s=zs();a(),e(n,s)}});var Ps=t(ss,2);c(Ps,{children:(n,o)=>{var s=Fs();a(),e(n,s)}}),i(x);var U=t(x,2),xs=u(U);v(xs,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">DBUser</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UserRepository</span> repository
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositoryException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repository <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repository is required!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(U);var ns=t(U,2);j(ns,{children:(n,o)=>{a();var s=r("Rust");e(n,s)}});var as=t(ns,2);l(as,{children:(n,o)=>{a();var s=r("Rust has a unique type-system because it has:");e(n,s)}});var S=t(as,2),ts=u(S);c(ts,{children:(n,o)=>{a();var s=Ks();a(2),e(n,s)}});var es=t(ts,2);c(es,{children:(n,o)=>{var s=Qs();a(),e(n,s)}});var Us=t(es,2);c(Us,{children:(n,o)=>{var s=Xs();a(),e(n,s)}}),i(S);var os=t(S,2);l(os,{children:(n,o)=>{a();var s=Ys();a(4),e(n,s)}});var R=t(os,2),Ss=u(R);v(Ss,()=>`<code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">CreateUserErr</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Repo</span><span class="token punctuation">(</span><span class="token class-name">RepoErr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">MissingRepo</span><span class="token punctuation">(</span><span class="token class-name">MissingRepoErr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_user</span><span class="token punctuation">(</span>
    user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UserRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">DBUser</span><span class="token punctuation">,</span> <span class="token class-name">CreateUserErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repository <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> r
            <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span>
                <span class="token class-name">CreateUserErr</span><span class="token punctuation">::</span><span class="token class-name">Repo</span><span class="token punctuation">(</span>
                    e
                <span class="token punctuation">)</span>            
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span>
            <span class="token class-name">CreateUserErr</span><span class="token punctuation">::</span><span class="token class-name">MissingRepo</span><span class="token punctuation">(</span>
                <span class="token class-name">MissingRepoErr</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),i(R);var ps=t(R,2);m(ps,{children:(n,o)=>{a();var s=r("Conclusion");e(n,s)}});var rs=t(ps,2);l(rs,{children:(n,o)=>{a();var s=Zs();a(4),e(n,s)}});var Rs=t(rs,2);l(Rs,{children:(n,o)=>{a();var s=sn();a(2),e(n,s)}}),e(ms,q)},$$slots:{default:!0}}))}export{gn as default,is as metadata};
