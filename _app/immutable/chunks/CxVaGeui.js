import{t as p,b as r,a as t}from"./BPHt8eje.js";import"./Devn5Tq6.js";import{A as ua,F as n,B as o,C as u,D as i}from"./lc7zKNTw.js";import{h as m}from"./amNWgKlN.js";import{l as qa,s as ja}from"./Dq5CK-DW.js";import{P as Ca,H as Ia,a as l,b as v,L as c}from"./CEihvC8y.js";import{H as q}from"./CSOcI4nn.js";const ia={title:"Interfaces",description:"Existe alguma forma de tornar um projeto grande fácil de implementar, fácil de testar e com segurança de tipos?",created_at:"2023-08-12",updated_at:"2025-02-27",technologies:["JavaScript","TypeScript","Java","Rust"]},{title:us,description:is,created_at:ks,updated_at:ds,technologies:ms}=ia;var Na=p("Existe alguma forma de tornar um <em>projeto grande</em> fácil de <em>implementar</em>, fácil de <em>testar</em> e com <em>segurança de tipos</em>?",1),Da=p(`Em qualquer linguagem de programação, dados possuem tipo. Números, texto, binários, todos eles
possuem um <em>tipo específico</em>. Do mesmo modo, um objeto pode ser definido por um tipo, referido como <em>interface</em> na maioria das linguagens.`,1),Ha=p("Exemplo de um serviço para criar um usuário, que também exporta os seus <em>stubs</em>",1),Ta=p(`Qualquer função que receba um argumento do tipo <strong>CriarUsuarioServico</strong> pode ser testada usando <strong>criarUsuarioServicoStub</strong> e <strong>criarUsuarioServicoErroStub</strong> ao invés de mockar todas as
dependências. Isso abstrai a implementação e permite você pensar apenas em <strong>entrada</strong> e <strong>saída</strong>.`,1),Ga=p(`Se você aplicar interfaces exaustivamente, a indireção dificulta seguir o código. Como uma boa
prática, use interfaces para: <strong>Recursos externos</strong> (requisições HTTP, conexão com bancos de
dados…) e <strong>injeção de dependência</strong> (Quando os recursos são passados via argumentos da função,
exatamente como no exemplo anterior)`,1),Ja=p("<strong>Valores null</strong>"),La=p("<strong>Gerenciamento de erros</strong>"),Aa=p("<!> <ul><!> <!></ul>",1),Ba=p("Veja o seguinte exemplo em <em>JavaScript</em>:",1),Va=p("<strong>repositorio</strong> pode ser null",1),Oa=p("<strong>repositorio</strong> pode lançar um erro",1),Qa=p("<strong>usuario</strong> é um argumento obrigatório",1),Ma=p("Se <strong>usuario</strong> for corretamente salvo, o usuário salvo é retornado",1),za=p("Palavra reservada <strong>throws</strong> para tornar o gerenciamento de erro explícito",1),Fa=p("<em>Mockito</em> e bibliotecas similares para mockar injeção de dependências em tempo de execução",1),Ka=p("Ausência de ponteiro <em>null</em>",1),Wa=p("Estrutura de dado <em>Option</em> para lidar com valores presentes ou ausentes",1),Xa=p("Estrutura de dado <em>Result</em> para lidar com valores de sucesso ou erro",1),Ya=p(`<em>Option</em> e <em>Result</em> são enums, e como Rust obriga a exaustividade de enums, isso obriga o
desenvolvedor a lidar com cada caso:`,1),Za=p(`Quanto mais rigoroso o sistema de tipos de uma linguagem de programação, menos suscetível a erros e
mais verboso será o código. <strong>Interfaces</strong> são ferramentas poderosas, mas que podem <strong>esconder erros
e valores nulos</strong>, conforme a linguagem de programação.`,1),as=p(`A escolha de como lidar com essas limitações vai depender principalmente de qual a tolerância a bugs
do projeto, porém objetivamente, um software com menos bugs é <strong>melhor</strong>.`,1),ss=p('<!> <!> <!> <!> <blockquote><!></blockquote> <!> <ul><!> <!> <!></ul> <!> <pre class="language-ts"><!></pre> <blockquote><!></blockquote> <!> <!> <ul><!> <!></ul> <!> <!> <pre class="language-js"><!></pre> <!> <ul><!> <!> <!> <!></ul> <!> <!> <pre class="language-ts"><!></pre> <!> <!> <ul><!> <!> <!></ul> <pre class="language-java"><!></pre> <!> <!> <ul><!> <!> <!></ul> <!> <pre class="language-rust"><!></pre> <!> <!> <!>',1);function vs(ka,da){const ma=qa(da,["children","$$slots","$$events","$$legacy"]);Ca(ka,ja(()=>ma,ia,{children:(va,ns)=>{var j=ss(),C=ua(j);Ia(C,{children:(s,e)=>{n();var a=r("Interfaces");t(s,a)}});var I=o(C,2);l(I,{children:(s,e)=>{n();var a=Na();n(8),t(s,a)}});var N=o(I,2);v(N,{children:(s,e)=>{n();var a=r("Tipos De Dado");t(s,a)}});var D=o(N,2);l(D,{children:(s,e)=>{n();var a=Da();n(4),t(s,a)}});var _=o(D,2),ga=u(_);l(ga,{children:(s,e)=>{n();var a=r("Uma interface é um conjunto de operações com argumentos e tipagem de retorno.");t(s,a)}}),i(_);var H=o(_,2);l(H,{children:(s,e)=>{n();var a=r("Isso permite:");t(s,a)}});var $=o(H,2),T=u($);c(T,{children:(s,e)=>{n();var a=r("Múltiplas implementações");t(s,a)}});var G=o(T,2);c(G,{children:(s,e)=>{n();var a=r("Esconder a injeção de dependências");t(s,a)}});var _a=o(G,2);c(_a,{children:(s,e)=>{n();var a=r("Plain objects testáveis");t(s,a)}}),i($);var J=o($,2);v(J,{children:(s,e)=>{n();var a=r("Por quê?");t(s,a)}});var f=o(J,2),$a=u(f);m($a,()=>`<code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CriarUsuarioServico</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoReal<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        usuario<span class="token operator">:</span> UsuarioCriar<span class="token punctuation">,</span>
        validador<span class="token operator">:</span> UsuarioValidador<span class="token punctuation">,</span>
        geradorId<span class="token operator">:</span> GeradorId<span class="token punctuation">,</span>
        geradorSenha<span class="token operator">:</span> GeradorSenha<span class="token punctuation">,</span>
        repositorio<span class="token operator">:</span> UsuarioRepositorio<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* omitted */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userStub<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> criarUsuarioServicoErroStub<span class="token operator">:</span> CriarUsuarioServico <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">criar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`),i(f);var h=o(f,2),fa=u(h);l(fa,{children:(s,e)=>{n();var a=Ha();n(),t(s,a)}}),i(h);var L=o(h,2);l(L,{children:(s,e)=>{n();var a=Ta();n(10),t(s,a)}});var A=o(L,2);v(A,{children:(s,e)=>{n();var a=r("Armadilhas");t(s,a)}});var b=o(A,2),B=u(b);c(B,{children:(s,e)=>{l(s,{children:(a,R)=>{n();var g=Ga();n(4),t(a,g)}})}});var ha=o(B,2);c(ha,{children:(s,e)=>{var a=Aa(),R=ua(a);l(R,{children:(k,la)=>{n();var d=r("Existem dois problemas que um sistema de tipos pode não cobrir:");t(k,d)}});var g=o(R,2),ca=u(g);c(ca,{children:(k,la)=>{var d=Ja();t(k,d)},$$slots:{default:!0}});var Ra=o(ca,2);c(Ra,{children:(k,la)=>{var d=La();t(k,d)},$$slots:{default:!0}}),i(g),t(s,a)}}),i(b);var V=o(b,2);v(V,{children:(s,e)=>{n();var a=r("Linguagem Por Linguagem");t(s,a)}});var O=o(V,2);l(O,{children:(s,e)=>{n();var a=Ba();n(2),t(s,a)}});var P=o(O,2),ba=u(P);m(ba,()=>`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token parameter">usuario<span class="token punctuation">,</span>
    repositorio<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(P);var Q=o(P,2);l(Q,{children:(s,e)=>{n();var a=r("Para comparar esse código com outras linguagens de programção, suponha:");t(s,a)}});var w=o(Q,2),M=u(w);c(M,{children:(s,e)=>{var a=Va();n(),t(s,a)}});var z=o(M,2);c(z,{children:(s,e)=>{var a=Oa();n(),t(s,a)}});var F=o(z,2);c(F,{children:(s,e)=>{var a=Qa();n(),t(s,a)}});var Pa=o(F,2);c(Pa,{children:(s,e)=>{n();var a=Ma();n(2),t(s,a)}}),i(w);var K=o(w,2);q(K,{children:(s,e)=>{n();var a=r("TypeScript");t(s,a)}});var W=o(K,2);l(W,{children:(s,e)=>{n();var a=r("TypeScript suporta união de tipos, o que permite tipar valores obrigatórios e nulos:");t(s,a)}});var x=o(W,2),wa=u(x);m(wa,()=>`<code class="language-ts"><span class="token keyword">function</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    usuario<span class="token operator">:</span> Usuario<span class="token punctuation">,</span>
    repositorio<span class="token operator">:</span> UsuarioRepositorio <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> BDUsuario <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repositorio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(x);var X=o(x,2);q(X,{children:(s,e)=>{n();var a=r("Java");t(s,a)}});var Y=o(X,2);l(Y,{children:(s,e)=>{n();var a=r("Java provê:");t(s,a)}});var y=o(Y,2),Z=u(y);c(Z,{children:(s,e)=>{n();var a=r(`Sintaxe de anotação que permite criar anotações para valores obrigatórios e que podem ser nulos,
embora não haja uma implementação disso na biblioteca padrão`);t(s,a)}});var aa=o(Z,2);c(aa,{children:(s,e)=>{n();var a=za();n(2),t(s,a)}});var xa=o(aa,2);c(xa,{children:(s,e)=>{var a=Fa();n(),t(s,a)}}),i(y);var U=o(y,2),ya=u(U);m(ya,()=>`<code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BDUsuario</span> <span class="token function">criarUsuario</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Usuario</span> usuario<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">UsuarioRepositorio</span> repositorio
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RepositorioException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repositorio <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"repositorio é obrigatório!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> repositorio<span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),i(U);var sa=o(U,2);q(sa,{children:(s,e)=>{n();var a=r("Rust");t(s,a)}});var na=o(sa,2);l(na,{children:(s,e)=>{n();var a=r("Rust possui um sistema de tipos único, porque possui:");t(s,a)}});var S=o(na,2),oa=u(S);c(oa,{children:(s,e)=>{n();var a=Ka();n(),t(s,a)}});var ta=o(oa,2);c(ta,{children:(s,e)=>{n();var a=Wa();n(2),t(s,a)}});var Ua=o(ta,2);c(Ua,{children:(s,e)=>{n();var a=Xa();n(2),t(s,a)}}),i(S);var ea=o(S,2);l(ea,{children:(s,e)=>{var a=Ya();n(3),t(s,a)}});var E=o(ea,2),Sa=u(E);m(Sa,()=>`<code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">CriarUsuarioErr</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Repo</span><span class="token punctuation">(</span><span class="token class-name">RepoErr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">RepoNaoInformado</span><span class="token punctuation">(</span><span class="token class-name">RepoNaoInformadoErr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">criar_usuario</span><span class="token punctuation">(</span>
    usuario<span class="token punctuation">:</span> <span class="token class-name">Usuario</span><span class="token punctuation">,</span>
    repo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">UsuarioRepo</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">BDUsuario</span><span class="token punctuation">,</span> <span class="token class-name">CriarUsuarioErr</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">match</span> repo <span class="token punctuation">&#123;</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> r
            <span class="token punctuation">.</span><span class="token function">salvar</span><span class="token punctuation">(</span>usuario<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span>
                <span class="token class-name">CriarUsuarioErr</span><span class="token punctuation">::</span><span class="token class-name">Repo</span><span class="token punctuation">(</span>
                    e
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span>
            <span class="token class-name">CriarUsuarioErr</span><span class="token punctuation">::</span><span class="token class-name">RepoNaoInformado</span><span class="token punctuation">(</span>
                <span class="token class-name">RepoNaoInformadoErr</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),i(E);var pa=o(E,2);v(pa,{children:(s,e)=>{n();var a=r("Conclusão");t(s,a)}});var ra=o(pa,2);l(ra,{children:(s,e)=>{n();var a=Za();n(4),t(s,a)}});var Ea=o(ra,2);l(Ea,{children:(s,e)=>{n();var a=as();n(2),t(s,a)}}),t(va,j)},$$slots:{default:!0}}))}export{vs as default,ia as metadata};
