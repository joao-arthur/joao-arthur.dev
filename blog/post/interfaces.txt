1:"$Sreact.fragment"
2:I[1418,["278","static/chunks/278-f46445cdc90a56be.js","1","static/chunks/1-878cdbc16abb7e9a.js","859","static/chunks/859-c32ada7303c662f1.js","177","static/chunks/app/layout-ebc47a2907e75744.js"],"default"]
3:I[5775,["278","static/chunks/278-f46445cdc90a56be.js","1","static/chunks/1-878cdbc16abb7e9a.js","859","static/chunks/859-c32ada7303c662f1.js","177","static/chunks/app/layout-ebc47a2907e75744.js"],"theme"]
4:I[6529,["278","static/chunks/278-f46445cdc90a56be.js","1","static/chunks/1-878cdbc16abb7e9a.js","859","static/chunks/859-c32ada7303c662f1.js","177","static/chunks/app/layout-ebc47a2907e75744.js"],"default"]
5:I[8003,["278","static/chunks/278-f46445cdc90a56be.js","1","static/chunks/1-878cdbc16abb7e9a.js","859","static/chunks/859-c32ada7303c662f1.js","177","static/chunks/app/layout-ebc47a2907e75744.js"],"Header"]
6:I[3632,[],""]
7:I[4998,[],""]
9:I[3089,[],"OutletBoundary"]
b:I[3089,[],"MetadataBoundary"]
d:I[3089,[],"ViewportBoundary"]
f:I[1423,[],""]
:HL["/_next/static/media/f884d4ea94220255-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ab37337c1c62f8c7.css","style"]
0:{"P":null,"b":"MvUcKwPRdAo2I8E8aRCcO","p":"","c":["","blog","post","interfaces"],"i":false,"f":[[["",{"children":["blog",{"children":["post",{"children":[["id","interfaces","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ab37337c1c62f8c7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__className_33955e w-svw h-svh overflow-hidden","children":["$","body",null,{"className":"flex flex-col w-full h-full overflow-hidden","children":["$","main",null,{"className":"w-full h-full overflow-y-auto overflow-x-hidden min-w-0","children":["$","$L2",null,{"theme":"$3","children":[["$","$L4",null,{}],["$","section",null,{"className":"w-full flex flex-col items-center","children":[["$","$L5",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","interfaces","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","post","children","$0:f:0:1:2:children:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":"$La"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","CKBxzKM_Mijvg8hg07bKB",{"children":[["$","$Lb",null,{"children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","link","1",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"75x75"}]]
a:null
8:["$","div",null,{"className":"w-full px-5","children":["$","div",null,{"className":"prose dark:prose-invert prose-img:w-32 prose-img:h-w-32 prose-img:rendering-pixelated flex flex-col pb-12 pt-5 m-auto","children":[["$","h1","h1-0",{"children":"Interfaces"}],"\n",["$","p","p-0",{"children":["Is there a way to make a ",["$","em","em-0",{"children":"big project"}]," easy to ",["$","em","em-1",{"children":"implement"}],", easy to ",["$","em","em-2",{"children":"test"}]," and ",["$","em","em-3",{"children":"type-safe"}],"?"]}],"\n",["$","h2","h2-0",{"children":"Data Types"}],"\n",["$","p","p-1",{"children":["In any programming language, data has types. Numbers, text, binaries, all of them have a ",["$","em","em-0",{"children":"specific\ntype"}],". The same way, an object can be defined by a type, referred to as an ",["$","em","em-1",{"children":"interface"}]," in most\nlanguages."]}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"An interface is a set of operations with arguments and return types."}],"\n"]}],"\n",["$","p","p-2",{"children":"This allows for:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"Multiple implementations"}],"\n",["$","li","li-1",{"children":"Hide dependency injection"}],"\n",["$","li","li-2",{"children":"Plain objects for testing"}],"\n"]}],"\n",["$","h2","h2-1",{"children":"Why?"}],"\n",["$","pre","pre-0",{"children":["$","code","code-0",{"className":"language-ts","children":"type CreateUserService = {\n    create: (\n        user: UserCreate,\n        validator: UserValidator,\n        idGenerator: IdGenerator,\n        passwordGenerator: PasswordGenerator,\n        repository: UserRepository,\n    ) => Promise<User>;\n};\n\nexport const createUserServiceActual: CreateUserService = {\n    create: (\n        user: UserCreate,\n        validator: UserValidator,\n        idGenerator: IdGenerator,\n        passwordGenerator: PasswordGenerator,\n        repository: UserRepository,\n    ) => {/* omitted */},\n};\n\nexport const createUserServiceStub: CreateUserService = {\n    create: () => Promise.resolve(userStub),\n};\n\nexport const createUserServiceErrorStub: CreateUserService = {\n    create: () => {\n        throw new Error();\n    },\n};\n"}]}],"\n",["$","blockquote","blockquote-1",{"children":["\n",["$","p","p-0",{"children":["Sample service to create a user, that also exports its ",["$","em","em-0",{"children":"stubs"}]]}],"\n"]}],"\n",["$","p","p-3",{"children":["Any functions that has a ",["$","strong","strong-0",{"children":"CreateUserService"}]," argument can be tested using\n",["$","strong","strong-1",{"children":"createUserServiceStub"}]," and ",["$","strong","strong-2",{"children":"createUserServiceErrorStub"}]," instead of mocking all dependencies.\nThis abstracts implementation and let you think about ",["$","strong","strong-3",{"children":"input"}]," and ",["$","strong","strong-4",{"children":"output"}],"."]}],"\n",["$","h2","h2-2",{"children":"Pitfalls"}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p","p-0",{"children":["If you apply interfaces exhaustively, the code indirection makes it hard to follow the code. As a\nrule of thumb, use interfaces for: ",["$","strong","strong-0",{"children":"External resources"}]," (HTTP requests, database connections...)\nand ",["$","strong","strong-1",{"children":"dependency injection"}]," (When these resources are passed as arguments of functions, exactly\nas in the previous example)"]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p","p-0",{"children":"There is two problems that a type-system may not cover:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["$","strong","strong-0",{"children":"Null values"}]}],"\n",["$","li","li-1",{"children":["$","strong","strong-0",{"children":"Error handling"}]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h2","h2-3",{"children":"Language By Language"}],"\n",["$","p","p-4",{"children":["Take the following example in ",["$","em","em-0",{"children":"JavaScript"}],":"]}],"\n",["$","pre","pre-1",{"children":["$","code","code-0",{"className":"language-js","children":"async function createUser(\n    user,\n    repository,\n) {\n    if (!repository) {\n        throw new Error(\"repository is required!\");\n    }\n    return repository.save(user);\n}\n"}]}],"\n",["$","p","p-5",{"children":"In order to compare this code to another languages, suppose:"}],"\n",["$","ul","ul-2",{"children":["\n",["$","li","li-0",{"children":[["$","code","code-0",{"children":"repository"}]," can be null"]}],"\n",["$","li","li-1",{"children":[["$","code","code-0",{"children":"repository"}]," can throw an error"]}],"\n",["$","li","li-2",{"children":[["$","code","code-0",{"children":"user"}]," is an required argument"]}],"\n",["$","li","li-3",{"children":["If ",["$","code","code-0",{"children":"user"}]," is correctly saved, the saved user is returned"]}],"\n"]}],"\n",["$","h3","h3-0",{"children":"Typescript"}],"\n",["$","p","p-6",{"children":"Typescript supports union types, that allow typing required and null values:"}],"\n",["$","pre","pre-2",{"children":["$","code","code-0",{"className":"language-ts","children":"function createUser(\n    user: User,\n    repository: UserRepository | null,\n): DBUser {\n    if (!repository) {\n        throw new Error(\"repository is required!\");\n    }\n    return repository.save(user);\n}\n"}]}],"\n",["$","h3","h3-1",{"children":"Java"}],"\n",["$","p","p-7",{"children":"Java provides:"}],"\n",["$","ul","ul-3",{"children":["\n",["$","li","li-0",{"children":["Annotation syntax that allows for ",["$","code","code-0",{"children":"@Nullable"}]," and ",["$","code","code-1",{"children":"@NotNull"}]," (There are many implementations from\ndifferent libs)"]}],"\n",["$","li","li-1",{"children":[["$","code","code-0",{"children":"throws"}]," keyword to make error handling explicit"]}],"\n",["$","li","li-2",{"children":[["$","em","em-0",{"children":"Mockito"}]," and similar libraries to mock injected dependencies during runtime"]}],"\n"]}],"\n",["$","pre","pre-3",{"children":["$","code","code-0",{"className":"language-java","children":"import org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic DBUser createUser(\n    @NotNull User user,\n    @Nullable UserRepository repository\n) throws RepositoryException, Exception {\n    if (repository == null) {\n        throw new Exception(\"repository is required!\");\n    }\n    return repository.save(user);\n}\n"}]}],"\n",["$","h3","h3-2",{"children":"Rust"}],"\n",["$","p","p-8",{"children":"Rust has a unique type-system because it has:"}],"\n",["$","ul","ul-4",{"children":["\n",["$","li","li-0",{"children":["No ",["$","em","em-0",{"children":"null"}]," pointer"]}],"\n",["$","li","li-1",{"children":[["$","em","em-0",{"children":"Option"}]," data structure to handle present or absent values"]}],"\n",["$","li","li-2",{"children":[["$","em","em-0",{"children":"Result"}]," data structure to handle success or error values"]}],"\n"]}],"\n",["$","p","p-9",{"children":["The ",["$","em","em-0",{"children":"Option"}]," and ",["$","em","em-1",{"children":"Result"}]," work like enums, so it is necessary to handle each case:"]}],"\n",["$","pre","pre-4",{"children":["$","code","code-0",{"className":"language-rs","children":"pub fn create_user(\n    user: User,\n    repo: Option<UserRepo>,\n) -> Result<DBUser, RepoErr> {\n    match repository {\n        Some(r) => Ok(r.save(user)),\n        None => Err(\"repository is required!\"),\n    }\n}\n"}]}],"\n",["$","h2","h2-4",{"children":"Conclusion"}],"\n",["$","p","p-10",{"children":["Interfaces, like any ",["$","strong","strong-0",{"children":"abstraction"}],", can ",["$","em","em-0",{"children":"hide errors"}],". If null and errors are ",["$","strong","strong-1",{"children":"explicit"}],", these\nerrors can be avoided, at the cost of verbose code. Personally, I like the ",["$","strong","strong-2",{"children":"Rust"}]," solution."]}]]}]}]
