1:"$Sreact.fragment"
2:I[11418,["75","static/chunks/75-00367da06d7ffc0a.js","83","static/chunks/83-39f05e0aa32140b8.js","182","static/chunks/182-c82a4aad29aebc92.js","38","static/chunks/38-81881b86de922585.js","1","static/chunks/1-121589f47503addc.js","899","static/chunks/899-08c6e003bd3ac6ac.js","177","static/chunks/app/layout-fa32d43f577a4d29.js"],"default"]
3:I[45775,["75","static/chunks/75-00367da06d7ffc0a.js","83","static/chunks/83-39f05e0aa32140b8.js","182","static/chunks/182-c82a4aad29aebc92.js","38","static/chunks/38-81881b86de922585.js","1","static/chunks/1-121589f47503addc.js","899","static/chunks/899-08c6e003bd3ac6ac.js","177","static/chunks/app/layout-fa32d43f577a4d29.js"],"theme"]
4:I[26529,["75","static/chunks/75-00367da06d7ffc0a.js","83","static/chunks/83-39f05e0aa32140b8.js","182","static/chunks/182-c82a4aad29aebc92.js","38","static/chunks/38-81881b86de922585.js","1","static/chunks/1-121589f47503addc.js","899","static/chunks/899-08c6e003bd3ac6ac.js","177","static/chunks/app/layout-fa32d43f577a4d29.js"],"default"]
5:I[48003,["75","static/chunks/75-00367da06d7ffc0a.js","83","static/chunks/83-39f05e0aa32140b8.js","182","static/chunks/182-c82a4aad29aebc92.js","38","static/chunks/38-81881b86de922585.js","1","static/chunks/1-121589f47503addc.js","899","static/chunks/899-08c6e003bd3ac6ac.js","177","static/chunks/app/layout-fa32d43f577a4d29.js"],"Header"]
6:I[63632,[],""]
7:I[34998,[],""]
9:I[43089,[],"OutletBoundary"]
b:I[43089,[],"MetadataBoundary"]
d:I[43089,[],"ViewportBoundary"]
f:I[41423,[],""]
:HL["/_next/static/media/f884d4ea94220255-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/5c836b2d568233ae.css","style"]
0:{"P":null,"b":"MmQfV19aTx_sLUZYXc_wk","p":"","c":["","blog","post","interfaces"],"i":false,"f":[[["",{"children":["blog",{"children":["post",{"children":[["id","interfaces","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5c836b2d568233ae.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__className_33955e w-svw h-svh overflow-hidden","children":["$","body",null,{"className":"flex flex-col w-full h-full overflow-hidden","children":["$","main",null,{"className":"w-full h-full overflow-y-auto overflow-x-hidden min-w-0","children":["$","$L2",null,{"theme":"$3","children":[["$","$L4",null,{}],["$","section",null,{"className":"w-full flex flex-col items-center","children":[["$","$L5",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","interfaces","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","post","children","$0:f:0:1:2:children:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":"$La"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","lM0hS47RVJmE--YruA1ue",{"children":[["$","$Lb",null,{"children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","link","1",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"75x75"}]]
a:null
10:I[57409,["75","static/chunks/75-00367da06d7ffc0a.js","38","static/chunks/38-81881b86de922585.js","984","static/chunks/984-0813229f5aefba45.js","952","static/chunks/app/blog/post/%5Bid%5D/page-93bbe2e6391f39c5.js"],"MarkdownPost"]
11:T105b,# Interfaces

Is there a way to make a _big project_ easy to _implement_, easy to _test_ and _type-safe_?

## Data Types

In any programming language, data has types. Numbers, text, binaries, all of them have a _specific
type_. The same way, an object can be defined by a type, referred to as an _interface_ in most
languages.

> An interface is a set of operations with arguments and return types.

This allows for:

- Multiple implementations
- Hide dependency injection
- Plain objects for testing

## Why?

```ts
type CreateUserService = {
    create: (
        user: UserCreate,
        validator: UserValidator,
        idGenerator: IdGenerator,
        passwordGenerator: PasswordGenerator,
        repository: UserRepository,
    ) => Promise<User>;
};

export const createUserServiceActual: CreateUserService = {
    create: (
        user: UserCreate,
        validator: UserValidator,
        idGenerator: IdGenerator,
        passwordGenerator: PasswordGenerator,
        repository: UserRepository,
    ) => {/* omitted */},
};

export const createUserServiceStub: CreateUserService = {
    create: () => Promise.resolve(userStub),
};

export const createUserServiceErrorStub: CreateUserService = {
    create: () => {
        throw new Error();
    },
};
```

> Sample service to create a user, that also exports its _stubs_

Any functions that has a **CreateUserService** argument can be tested using
**createUserServiceStub** and **createUserServiceErrorStub** instead of mocking all dependencies.
This abstracts implementation and let you think about **input** and **output**.

## Pitfalls

- If you apply interfaces exhaustively, the code indirection makes it hard to follow the code. As a
  rule of thumb, use interfaces for: **External resources** (HTTP requests, database connections...)
  and **dependency injection** (When these resources are passed as arguments of functions, exactly
  as in the previous example)

- There is two problems that a type-system may not cover:

  - **Null values**
  - **Error handling**

## Language By Language

Take the following example in _JavaScript_:

```js
async function createUser(
    user,
    repository,
) {
    if (!repository) {
        throw new Error("repository is required!");
    }
    return repository.save(user);
}
```

In order to compare this code to another languages, suppose:

- **repository** can be null
- **repository** can throw an error
- **user** is an required argument
- If **user** is correctly saved, the saved user is returned

### Typescript

Typescript supports union types, that allow typing required and null values:

```ts
function createUser(
    user: User,
    repository: UserRepository | null,
): DBUser {
    if (!repository) {
        throw new Error("repository is required!");
    }
    return repository.save(user);
}
```

### Java

Java provides:

- Annotation syntax that allows for **@Nullable** and **@NotNull** (There are many implementations
  from different libs)
- **throws** keyword to make error handling explicit
- _Mockito_ and similar libraries to mock injected dependencies during runtime

```java
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public DBUser createUser(
    @NotNull User user,
    @Nullable UserRepository repository
) throws RepositoryException, Exception {
    if (repository == null) {
        throw new Exception("repository is required!");
    }
    return repository.save(user);
}
```

### Rust

Rust has a unique type-system because it has:

- No _null_ pointer
- _Option_ data structure to handle present or absent values
- _Result_ data structure to handle success or error values

The _Option_ and _Result_ work like enums, so it is necessary to handle each case:

```rust
pub fn create_user(
    user: User,
    repo: Option<UserRepo>,
) -> Result<DBUser, RepoErr> {
    match repository {
        Some(r) => Ok(r.save(user)),
        None => Err("repository is required!"),
    }
}
```

## Conclusion

Interfaces, like any **abstraction**, can _hide errors_. If null and errors are **explicit**, these
errors can be avoided, at the cost of verbose code. Personally, I like the **Rust** solution.
8:["$","$L10",null,{"children":"$11"}]
